version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      # Logs Docker CLI into your ECR registry. AWS_ACCOUNT_ID and AWS_DEFAULT_REGION are environment variables automatically available in CodeBuild.
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=305362906248.dkr.ecr.eu-north-1.amazonaws.com/sofr-scraper # Replace 'sofr-scraper' if you named your ECR repo differently
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) # Use the commit ID as the image tag for versioning
      # If CODEBUILD_RESOLVED_SOURCE_VERSION is not available (e.g. for local builds not typically used here), use 'latest'
      - IMAGE_TAG=${IMAGE_TAG:-latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      # Builds the Docker image using the Dockerfile in the current directory.
      # Tags it with the REPOSITORY_URI and the determined IMAGE_TAG.
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest # Also tag as latest for convenience
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image to ECR...
      # Pushes the tagged image to your ECR repository.
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo Writing image definitions file...
      # This part is often used for continuous deployment with CodePipeline to ECS/Fargate
      # For a scheduled task, it's less critical but good practice. It creates a JSON file
      # describing the image, which can be used by later deployment stages if you expand.
      - printf '[{"name":"sofr-scraper-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
